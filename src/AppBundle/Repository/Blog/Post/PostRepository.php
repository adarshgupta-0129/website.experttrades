<?php

namespace AppBundle\Repository\Blog\Post;

use AppBundle\Repository\Repository;

/**
 * SiteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends Repository{
	
	public function getPaginated($limit, $offset, $filters = []){
	
		$data = $this->getEntityManager()->createQueryBuilder();
		$data->from('AppBundle\Entity\Blog\Post\Post', 'p');
		$data->where('p.publish IS NOT NULL');
		$data->andWhere('p.publish <= :date_now');
		$data->setParameter('date_now' , (new \DateTime()) );
		
		if(isset($filters['search']) && $filters['search'] != "" ){
			$data->andWhere('p.search LIKE  :search');
			$data->setParameter('search' , '%'.$filters['search'].'%');
		}
		
		$count = clone $data;
		$count->select('count(p.id)');
		$total = $count->getQuery()->getSingleScalarResult();
		
		$data->select('p');
		$data->setFirstResult($offset);
		$data->setMaxResults($limit);
		$data->orderBy('p.publish', 'desc');
		$result = $data->getQuery()->getResult();
	
		$final = [];
		foreach($result as $post){
			$result_post = [];
			$result_post['id'] = $post->getId();
			$result_post['title'] = $post->getTitle();
			$result_post['slug'] = $post->getSlug();
			$result_post['excerpt'] = $post->getExcerpt();
			$result_post['body'] = $post->getBody();
			$result_post['published'] = (is_null($post->getPublish()))?null:$post->getPublish()->getTimestamp();
			$result_post['meta_title'] = $post->getMetaTitle();
			$result_post['meta_description'] = $post->getMetaDescription();
			if( ($item = $post->getFeaturedItem()) !== FALSE)
				$result_post['featuredImage'] = array( 'url' => $item->getWebPath(), 'title' => $item->getTitle()  );
			$final[] = $result_post;
		}
	
		return $this->payload($total, $limit, $offset, $final);
	
	}
	
	public function getAllPaginated($limit, $offset, $filters = []){
	
		$data = $this->getEntityManager()->createQueryBuilder();
		$data->from('AppBundle\Entity\Blog\Post\Post', 'p');

		if(isset($filters['search']) && $filters['search'] != "" ){
			$data->where('p.search <= :search');
			$data->setParameter('search' , $filters['search'] );
		}
		if(isset($filters['search_by']) && $filters['search_by'] != "" ){
			switch ($filters['search_by']){
				case 'published':
					$data->andWhere('p.publish IS NOT NULL');
					break;
				case 'unpublished':
					$data->andWhere('p.publish IS NULL');
					break;
			}
		}
	
		$count = clone $data;
		$count->select('count(p.id)');
		$total = $count->getQuery()->getSingleScalarResult();
	
		$data->select('p');
		$data->setFirstResult($offset);
		$data->setMaxResults($limit);
		$data->orderBy('p.publish', 'desc');
		$result = $data->getQuery()->getResult();
	
		$final = [];
		foreach($result as $post){
			$result_post = [];
			$result_post['id'] = $post->getId();
			$result_post['title'] = $post->getTitle();
			$result_post['slug'] = $post->getSlug();
			$result_post['excerpt'] = $post->getExcerpt();
			$result_post['body'] = $post->getBody();
			$result_post['published'] = (is_null($post->getPublish()))?null:$post->getPublish()->getTimestamp();
			$result_post['meta_title'] = $post->getMetaTitle();
			$result_post['meta_description'] = $post->getMetaDescription();
			if( ($item = $post->getFeaturedItem()) !== FALSE)
				$result_post['featuredImage'] = array( 'url' => $item->getWebPath(), 'title' => $item->getTitle()  );
			$final[] = $result_post;
		}
	
		return $this->payload($total, $limit, $offset, $final);
	
	}
	
	public function countPosts(){
	
		$data = $this->getEntityManager()->createQueryBuilder();
		$data->from('AppBundle\Entity\Blog\Post\Post', 'p');
		$data->where('p.publish IS NOT NULL');
		$data->andWhere('p.publish >= :date_now');
		$data->setParameters(array('date_now' => (new \DateTime()) ));
		$count = clone $data;
		$count->select('count(p.id)');
		$total = $count->getQuery()->getSingleScalarResult();
	
		return $total;
	
	}
	

	public function checkSlug( $slug, $id = null ){
	
		$data = $this->getEntityManager()->createQueryBuilder();
		$data->from('AppBundle\Entity\Blog\Post\Post', 'p');
		$data->where('p.slug = :slug');
		$data->setParameter('slug',$slug);
		if(!is_null($id)){
			$data->andWhere('p.id != :id');
			$data->setParameter('id', $id);
		}
		$count = clone $data;
		$count->select('count(p.id)');
		$total = $count->getQuery()->getSingleScalarResult();
	
		return $total;
	
	}


}
