<?php

namespace AppBundle\Repository\Gallery\Tag;

use AppBundle\Repository\Repository;
use AppBundle\Entity\Gallery\Item\ItemInterface;
use AppBundle\Entity\Gallery\Tag\TagInterface;
/**
 * SiteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemTagRepository extends Repository{


	public function getTagsByItem(ItemInterface $item){
		$data = $this->getEntityManager()->createQueryBuilder();
		$data->from('AppBundle\Entity\Gallery\Tag\ItemTag', 'ct');
		$data->join('ct.item', 'c');
		$data->join('ct.tag', 't');
		$data->where('c.id = :id');
		$data->setParameter('id',$item->getId());
        $data->select('distinct(t.id),t.name,t.description,t.bgcolor,t.color');
        $data->orderBy('t.path', 'asc');
        return $data->getQuery()->getArrayResult();
	}
	
	public function getTagsByItems(Array $items){
		$data = $this->getEntityManager()->createQueryBuilder();
		$data->from('AppBundle\Entity\Gallery\Tag\ItemTag', 'ct');
		$data->join('ct.item', 'c');
		$data->join('ct.tag', 't');
		$data->where('c.id IN (:ids)');
         $data->setParameter('ids', $items);
        $data->select('distinct(t.id),t.name,t.description,t.bgcolor,t.color');
        $data->orderBy('t.path', 'asc');
        return $data->getQuery()->getArrayResult();
	}
	
  public function getPaginated(ItemInterface $item, $limit, $offset, $filters = []){

      $data = $this->getEntityManager()->createQueryBuilder();
      $data->from('AppBundle\Entity\Gallery\Tag\ItemTag', 'lt');
      $data->join('lt.item', 'lis');
      $data->join('lt.tag', 't');
      $data->where('lis.id = :id');
      $data->setParameter('id',$item->getId());


      $count = clone $data;
      $count->select('count(lt)');
      $total = $count->getQuery()->getSingleScalarResult();


      $data->select('lt');
      if( !is_null($offset) && !is_null($limit) ){
        $data->setFirstResult(($offset));
        $data->setMaxResults($limit);
      }
      $data->orderBy('t.name', 'asc');
      $result = [];
      foreach($data->getQuery()->getResult() as $tag){
          $result[] = [
              'id' => $tag->getId(),
	          'parent_id' => $tag->getParentId(),
	          'name' => $tag->getName(),
	          'description' => $tag->getDescription(),
	          'color' => $tag->getColor(),
	          'created' => $tag->getCreated()->format('Y-m-d H:i')
          ];
      }

      if( !is_null($offset) && !is_null($limit) ){
        return $this->payload($total, $limit, $offset, $result);
      } else {
        return $result;
      }

  }

}
